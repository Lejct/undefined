--HTML输出流
document.write("");

--点击事件
onclick()

--警告函数
alert(String)

--确认方法confirm(String)

--提示框prompt(String)

--改变HTML的内容
document.getElementById.innerHTML

--改变图片地址
document.getElementById.src

--JavaScript match()方法
语法： object.match(value)    
       object.match(regexp)
用处：判断值是否存在，取出匹配正则表达式的值，和Java一样

--改变HTML样式
document.getElementById.style.color
document.getElementById.style.width
document.getElementById.style.height .....

--JavaScript isNaN()函数
定义：isNaN(x) 函数用于检查其参数是否是非数字值。
例子：isNaN(1)  false	      isNaN("1")  true		

--JavaScript 用法
HTML 中的脚本必须位于 <script> 与 </script> 标签之间。
脚本可被放置在 HTML 页面的 <body> 和 <head> 部分中。

--外部的 JavaScript
<script> 标签的 "src" 属性中设置该 .js 文件：

--JavaScript 常用输出方式
i.使用window.alert()弹出提示框
ii.使用document.write()方法内容写到HTML文档中
iii.使用innerHTML写入到HTML元素
iiii.使用console.log()写入到浏览器的控制台

--javaScript 是一个脚本语言。它是一个轻量级，但功能强大的编程语言。

--常见的字面量
Number | String | Obejct | Function | Array

--JavaScript数据类型   var(动态类型)
字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空（Null）、未定义（Undefined）。 

--JavaScript 函数语法
function functionname()
{
执行代码
}

--带参数的函数
function myFunction(var1,var2)
{
代码
}

--JavaScript 变量生命周期
JavaScript 变量生命周期在它声明时初始化。
局部变量在函数执行完毕后销毁。
全局变量在页面关闭后销毁。

--常见的HTML事件
事件 	描述
onchange 	HTML 元素改变
onclick 	用户点击 HTML 元素
onmouseover 	用户在一个HTML元素上移动鼠标
onmouseout 	用户从一个HTML元素上移开鼠标
onkeydown 	用户按下键盘按键
onload 	浏览器已完成页面的加载

--特殊字符
代码 	输出
\' 	单引号
\" 	双引号
\\ 	反斜杠
\n 	换行
\r 	回车
\t 	tab(制表符)
\b 	退格符
\f 	换页符

--typeof运算符
判断数据类型

--String属性
属性 	描述
constructor 	返回创建字符串属性的函数
length 	返回字符串的长度
prototype 	允许您向对象添加属性和方法

--String方法
Method 	描述
charAt() 	返回指定索引位置的字符
charCodeAt() 	返回指定索引位置字符的 Unicode 值
concat() 	连接两个或多个字符串，返回连接后的字符串
fromCharCode() 	将 Unicode 转换为字符串
indexOf() 	返回字符串中检索指定字符第一次出现的位置
lastIndexOf() 	返回字符串中检索指定字符最后一次出现的位置
localeCompare() 	用本地特定的顺序来比较两个字符串
match() 	找到一个或多个正则表达式的匹配
replace() 	替换与正则表达式匹配的子串
search() 	检索与正则表达式相匹配的值
slice() 	提取字符串的片断，并在新的字符串中返回被提取的部分
split() 	把字符串分割为子字符串数组
substr() 	从起始索引号提取字符串中指定数目的字符
substring() 	提取字符串中两个指定的索引号之间的字符
toLocaleLowerCase() 	根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射
toLocaleUpperCase() 	根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射
toLowerCase() 	把字符串转换为小写
toString() 	返回字符串对象值
toUpperCase() 	把字符串转换为大写
trim() 	移除字符串首尾空白
valueOf() 	返回某个字符串对象的原始值

--不同类型的循环
	javaScript 支持不同类型的循环：

    for - 循环代码块一定的次数
    for/in - 循环遍历对象的属性
    while - 当指定的条件为 true 时循环指定的代码块
    do/while - 同样当指定的条件为 true 时循环指定的代码块

--break 语句用于跳出循环。

--continue 用于跳过循环中的一个迭代。

--JavaScript 数据类型

在 JavaScript 中有 5 中不同的数据类型：

    string
    number
    boolean
    object
    function

3 种对象类型：

    Object
    Date
    Array

2 个不包含任何值的数据类型：

    null
    undefined

--constructor 属性

constructor 属性返回所有 JavaScript 变量的构造函数。

--使用constructorr判断
function isArray[date](myArray) {
    return myArray.constructor.toString().indexOf("Array") > -1;
	return myArray.constructor.toString().indexOf("Date") > -1;
} 

--Number 方法 
toExponential() 	把对象的值转换为指数计数法。  科学计算法 精确多少位        
toFixed() 	把数字转换为字符串，结果的小数点后有指定位数的数字。 四舍五入，精确小数点多少位
toPrecision() 	把数字格式化为指定的长度。
parseFloat() 	解析一个字符串，并返回一个浮点数。
parseInt() 	解析一个字符串，并返回一个整数。

-- Date 方法
getDate() 	从 Date 对象返回一个月中的某一天 (1 ~ 31)。
getDay() 	从 Date 对象返回一周中的某一天 (0 ~ 6)。
getFullYear() 	从 Date 对象以四位数字返回年份。
getHours() 	返回 Date 对象的小时 (0 ~ 23)。
getMilliseconds() 	返回 Date 对象的毫秒(0 ~ 999)。
getMinutes() 	返回 Date 对象的分钟 (0 ~ 59)。
getMonth() 	从 Date 对象返回月份 (0 ~ 11)。
getSeconds() 	返回 Date 对象的秒数 (0 ~ 59)。
getTime() 	返回 1970 年 1 月 1 日至今的毫秒数。

--一元运算符 +   可用于将变量转换为数字：
Number(false)     // 返回 0
Number(true)      // 返回 1 

--JavaScript search()方法
用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。
语法：object.search(string) 
      object.search(regexp)
	  
--JavaScript replace()方法
用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。
语法：object.replace(string1,string2);
      object.replace(regexp,string);
	  
--正则表达式修饰符
i 	执行对大小写不敏感的匹配。
g 	执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。
m 	执行多行匹配。

--正则表达式模式
[abc] 	查找方括号之间的任何字符。
[0-9] 	查找任何从 0 至 9 的数字。
(x|y) 	查找任何以 | 分隔的选项。 
\d 	查找数字。
\s 	查找空白字符。
\b 	匹配单词边界。
\uxxxx 	查找以十六进制数 xxxx 规定的 Unicode 字符。
n+ 	匹配任何包含至少一个 n 的字符串。
n* 	匹配任何包含零个或多个 n 的字符串。
n? 	匹配任何包含零个或一个 n 的字符串。

--RegExp对象的表现方法test()
用户检测一个字符串是否匹配某个模式  含有匹配的文本，则返回 true，否则返回 false。
JavavScript:     var  a=/d/i;     a.test(string);                          /开始 到/结尾   i修饰符
Jquery      :    var  a=new RegExp("^d$","g").test(value);           ^开始  到 $结尾  g修饰符

--RegExp对象的表现方法exec()
用于检索字符串中的正则表达式的匹配。函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。
JavavScript:     var  a=/e/.exec("The best things in life are free!");                      //返回e             部分匹配  和  MATCH一样
Jquery      :    var  a=new RegExp("^d$","g").exec("The best things in life are free!");        //返回null         完全匹配      用于验证validatebox

--异常处理   try-catch-throw

--JavaScript 表单验证
function validateForm()
{
var x=document.forms["myForm"]["fname"].value;
if (x==null || x=="")
  {
  alert("First name must be filled out");
  return false;
  }
}

--JavaScript 保留关键字

abstract	arguments	boolean	break	byte
case	catch	char	class*	const
continue	debugger	default	delete	do
double	else	enum*	eval	export*
extends*	false	final	finally	float
for	function	goto	if	implements
import*	in	instanceof	int	interface
let	long	native	new	null
package	private	protected	public	return
short	static	super*	switch	synchronized
this	throw	throws	transient	true
try	typeof	var	void	volatile
while	with	yield		

--JavaScript 对象、属性和方法
Array	Date	eval	function	hasOwnProperty
Infinity	isFinite	isNaN	isPrototypeOf	length
Math	NaN	name	Number	Object
prototype	String	toString	undefined	valueOf

--Java 保留关键字
getClass	java	JavaArray	javaClass	JavaObject	JavaPackage

--Windows 保留关键字
alert	all	anchor	anchors	area
assign	blur	button	checkbox	clearInterval
clearTimeout	clientInformation	close	closed	confirm
constructor	crypto	decodeURI	decodeURIComponent	defaultStatus
document	element	elements	embed	embeds
encodeURI	encodeURIComponent	escape	event	fileUpload
focus	form	forms	frame	innerHeight
innerWidth	layer	layers	link	location
mimeTypes	navigate	navigator	frames	frameRate
hidden	history	image	images	offscreenBuffering
open	opener	option	outerHeight	outerWidth
packages	pageXOffset	pageYOffset	parent	parseFloat
parseInt	password	pkcs11	plugin	prompt
propertyIsEnum	radio	reset	screenX	screenY
scroll	secure	select	self	setInterval
setTimeout	status	submit	taint	text
textarea	top	unescape	untaint	window

--HTML 事件句柄
onblur	onclick	onerror	onfocus
onkeydown	onkeypress	onkeyup	onmouseover
onload	onmouseup	onmousedown	onsubmit
  
--JSON
JSON 英文全称 JavaScript Object Notation
JSON 是一种轻量级的数据交换格式。
JSON是独立的语言 *
JSON 易于理解。

--JSON 语法规则
数据为 键/值 对。
数据由逗号分隔。
大括号保存对象
方括号保存数组

--JSON 字符串转换为 JavaScript 对象
 使用 JavaScript 内置函数 JSON.parse() 将字符串转换为 JavaScript 对象:

--函数
JSON.parse()	用于将一个 JSON 字符串转换为 JavaScript 对象。
JSON.stringify()	用于将 JavaScript 值转换为 JSON 字符串。 

--关键字void(0)
javascript:void(0) 中最关键的是 void 关键字， void 是 JavaScript 中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值

--JavaScript 函数定义function()

--函数声明
function functionName(parameters) {
  执行的代码
}

--函数表达式
JavaScript 函数可以通过一个表达式定义。
函数表达式可以存储在变量中：var x = function (a, b) {return a * b};
函数表达式存储在变量后，变量也可作为一个函数使用：
var x = function (a, b) {return a * b};
var z = x(4, 3);

--Function() 构造函数
var myFunction = new Function("a", "b", "return a * b");
var x = myFunction(4, 3);

--函数提升（Hoisting）
提升（Hoisting）是 JavaScript 默认将当前作用域提升到前面去的的行为。
提升（Hoisting）应用在变量的声明与函数的声明。
因此，函数可以在声明之前调用：
myFunction(5);
function myFunction(y) {
    return y * y;
}

--自调用函数
函数表达式可以 "自调用"。
自调用表达式会自动调用。
如果表达式后面紧跟 () ，则会自动调用。
不能自调用声明的函数。
通过添加括号，来说明它是一个函数表达式：
(function () {
    var x = "Hello!!";      // 我将调用自己
})();

-- ||  如果y已经定义 ， y || 返回 y, 因为 y 是 true, 否则返回 0, 因为 undefined 为 false。

--Arguments 对象
JavaScript 函数有个内置的对象 arguments 对象.
argument 对象包含了函数调用的参数数组。
通过这种方式你可以很方便的找到最后一个参数的值：

--函数调用定义
在 HTML 中默认的全局对象是 HTML 页面本身，所以函数是属于 HTML 页面。
在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。

--JavaScript四种函数调用方式
作为一个函数调用：
	function myFunction(a, b) {
		return a * b;
	}
	myFunction(10, 2);           // myFunction(10, 2) 返回 20
	
作为方法调用：
	var myObject = {
		firstName:"John",
		lastName: "Doe",
		fullName: function () {
			return this.firstName + " " + this.lastName;
		}
	}
	myObject.fullName();         // 返回 "John Doe"	
	
作为构造函数调用函数
	function myFunction(arg1, arg2) {
		this.firstName = arg1;
		this.lastName  = arg2;
	}

	// This	creates a new object
	var x = new myFunction("John","Doe");
	x.firstName;                             // 返回 "John"	
	
作为函数方法调用函数   call() 和 apply() 是预定义的函数方法
    function myFunction(a, b) {
    return a * b;
	}
	myFunction.call(myObject, 10, 2);      // 返回 20	
	
	function myFunction(a, b) {
    return a * b;
	}
	myArray = [10,2];
	myFunction.apply(myObject, myArray);   // 返回 20
	
--Cookies 可用  navigator.cookieEnabled==true

--常见标签事件
onclick  鼠标点击触发
onload   进入页面触发
onunload  离开页面触发
onchange  发生改变触发
onmouseover   焦点移入触发
onmouseout    焦点移除触发
onmousedown   鼠标点击触发
onmouseup     鼠标松开触发	

--addEventListener() 方法
addEventListener() 方法用于向指定元素添加事件句柄。
addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。
你可以向一个元素添加多个事件句柄。
你可以向同个元素添加多个同类型的事件句柄，如：两个 "click" 事件。
你可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。
addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。
当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制HTML标记时也可以添加事件监听。
你可以使用 removeEventListener() 方法来移除事件的监听。
document.getElementById("myBtn").addEventListener("click", displayDate);

--向 Window 对象添加事件句柄
window.addEventListener("resize",function);           改变大小触发事件

--事件冒泡或事件捕获
事件传递有两种方式：冒泡与捕获。
事件传递定义了元素事件触发的顺序。 如果你将 <p> 元素插入到 <div> 元素中，用户点击 <p> 元素, 哪个元素的 "click" 事件先被触发呢？
在 冒泡 中，内部元素的事件会先被触发，然后再触发外部元素，即： <p> 元素的点击事件先触发，然后会触发 <div> 元素的点击事件。
在 捕获 中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： <div> 元素的点击事件先触发 ，然后再触发 <p> 元素的点击事件。
addEventListener() 方法可以指定 "useCapture" 参数来设置传递类型：	

--IE9以下的浏览器添加和删除事件句柄方法
element.attachEvent(event, function);
element.detachEvent(event, function);

--创建新的 HTML 元素
var para=document.createElement("p");            --创建一个p元素
var node=document.createTextNode("这是一个新段落。");   --创建一个文本节点
para.appendChild(node);          --P元素附加文本节点node
var element=document.getElementById("div1");
element.appendChild(para);       --div附加P元素
removeChild  删除子节点
appendChild  附加子节点
parentNode   查找父节点          例如：child.parentNode.removeChild(child);


--创建 JavaScript 对象两种不同的方法
创建直接的实例：person={firstname:"John",lastname:"Doe",age:50,eyecolor:"blue"};
使用对象构造器：function person(firstname,lastname,age,eyecolor)
								{
									this.firstname=firstname;
									this.lastname=lastname;
									this.age=age;
									this.eyecolor=eyecolor;
												}
                    var myFather=new person("John","Doe",50,"blue");

--JavaScript 类 基于prototype

--无穷大（Infinity）
当数字运算结果超过了JavaScript所能表示的数字上限（溢出），
结果为一个特殊的无穷大（infinity）值，在JavaScript中以Infinity表示。
同样地，当负数的值超过了JavaScript所能表示的负数范围，结果为负无穷大，
在JavaScript中以-Infinity表示。无穷大值的行为特性和我们所期望的是一致的：基于它们的加、减、乘和除运算结果还是无穷大

--NaN - 非数字值
NaN 属性是代表非数字值的特殊值。该属性用于指示某个值不是数字。可以把 Number 对象设置为该值，来指示其不是数字值。

--Number属性
MAX_VALUE
MIN_VALUE
NEGATIVE_INFINITY
POSITIVE_INFINITY
NaN
prototype
constructor

--Number方法
toExponential()
toFixed()
toPrecision()
toString()
valueOf()

--字符串属性和方法
属性:
length
prototype
constructor
方法:
charAt()
charCodeAt()
concat()
fromCharCode()
indexOf()
lastIndexOf()
match()
replace()
search()
slice()
split()
substr()
substring()
toLowerCase()
toUpperCase()
valueOf()

--JavaScript Date（日期） 对象
getFullYear() 	获取年份。
getMonth()      获取月份
getDay()        获取日
getTime() 	    返回从 1970 年 1 月 1 日至今的毫秒数。
setFullYear()   设置具体的日期。
toUTCString()   将当日的日期（根据 UTC）转换为字符串。
getDay()         返回星期
toLocaleTimeString   显示当前时间
--创建一个数组的三种方法

1: 常规方式:
var myCars=new Array(); 
myCars[0]="Saab";       
myCars[1]="Volvo";
myCars[2]="BMW";

2: 简洁方式:
var myCars=new Array("Saab","Volvo","BMW");

3: 字面:
var myCars=["Saab","Volvo","BMW"];

--Array数据方法
concat()   合并数组
join()     数组作为字符串输出
pop()      删除数组最后一个元素
push()     数组末尾添加新元素
unshift()  数组开头添加新元素
reverse()  反转排序
shift()    删除数组第一个元素
slice(1,3) 截取数组下标 1 到 2 的元素
sort()     字母排序
sort(function(a,b){return a-b})   数字排序升序
sort(function(a,b){return b-a})   数字排序降序
splice(2,0,"Lemon","Kiwi");     在第二个位置插入一个数组，删除后面0个元素，插入数组["Lemon","Kiwi"]
toString()        转换数组成字符串

--JavaScript Math（算数） 对象
round()              四舍五入
random()             返回 0 到 1 之间的随机数。
max()                返回最大数
min()				 返回最小数

--JavaScript RegExp 对象
语法
var patt=new RegExp(pattern,modifiers);

或更简单的方法

var patt=/pattern/modifiers;

match（）   返回品匹配值      str.match(regexp)
test()      返回真或假        regexp.test(str)
exec()      返回匹配条件的值，如果没有返回null regexp.exec(str);

--浏览器对象模型 (BOM)
浏览器对象模型 (BOM) 使 JavaScript 有能力与浏览器"对话"。
浏览器对象模型（Browser Object Model (BOM)）
全局变量是 window 对象的属性。
全局函数是 window 对象的方法。
甚至 HTML DOM 的 document 也是 window 对象的属性之一：

--Window 方法
window.open() - 打开新窗口
window.close() - 关闭当前窗口
window.moveTo() - 移动当前窗口
window.resizeTo() - 调整当前窗口的尺寸

--JavaScript Window Screen
属性：
screen.availWidth - 可用的屏幕宽度
screen.availHeight - 可用的屏幕高度

--JavaScript Window Location
location.hostname 返回 web 主机的域名
location.pathname 返回当前页面的路径和文件名
location.port 返回 web 主机的端口 （80 或 443）
location.protocol 返回所使用的 web 协议（http:// 或 https://）
location.href 属性返回当前页面的 URL。
location.assign() 方法加载新的文档。

--JavaScript Window History
history.back() - 与在浏览器点击后退按钮相同      
history.forward() - 与在浏览器中点击按钮向前相同

--JavaScript Window Navigator
indow.navigator 对象包含有关访问者浏览器的信息。
window.navigator 对象在编写时可不使用 window 这个前缀。
由于 navigator 可误导浏览器检测，使用对象检测可用来嗅探不同的浏览器。

--JavaScript 弹窗
JavaScript 中创建三种消息框：警告框、确认框、提示框。

语法
window.alert("sometext");
window.confirm("sometext");
window.prompt("sometext","defaultvalue");

--JavaScript 计时事件
JavaScritp 中使用计时事件是很容易的，两个关键方法是:
------------
setInterval() - 间隔指定的毫秒数不停地执行指定的代码。
语法
window.setInterval("javascript function",milliseconds);
------------
setTimeout() - 暂停指定的毫秒数后执行指定的代码
语法
window.setTimeout("javascript 函数",毫秒数);
------------
clearInterval（）  用于停止执行setInterval方法的函数代码。
语法
window.clearInterval(intervalVariable)
window.clearInterval() 方法可以不使用window前缀，直接使用函数clearInterval()。
------------
clearTimeout() 	用于停止执行setTimeout()方法的函数代码。
语法
window.clearTimeout(timeoutVariable)

--JavaScript Cookies
什么是 Cookies？
Cookies 是一些数据, 存储于你电脑上的文本文件中。
当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。
Cookies 的作用就是用于解决 "如何记录客户端的用户信息":
当用户访问 web 页面时，他的名字可以记录在 cookie 中。
在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。

-- JavaScript 创建Cookie
JavaScript 可以使用 document.cookie 属性来创建 、读取、及删除 cookies。
JavaScript 中，创建 cookie 如下所示：
document.cookie="username=John Doe";
您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：
document.cookie="username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT";
您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。
document.cookie="username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/";

--JavaScript 读取 Cookie
JavaScript 中, 可以使用以下代码来读取 cookies：
var x = document.cookie;
 
--JavaScript 删除 Cookie
删除 cookie 非常简单。您只需要设置 expires 参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:
document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 GMT";
PS：注意，当您删除时不必指定 cookie 的值。

--常用字符串添加样式

字体变大:String.big()

字体缩小:String.small()

字体加粗:String.bold()

斜体:String.italics()

固定定位:String.fixed()

加删除线:String.strike()

字体颜色:String.fontcolor(color) 

字体大小:String.fontsize(figure)

下标:String.sub()

上标:String.sup()

链接:String.link()

闪动文本:String.blink() 
